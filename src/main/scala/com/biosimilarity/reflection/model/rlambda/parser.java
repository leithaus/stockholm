
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri May 15 12:19:41 PDT 2009
//----------------------------------------------------

package com.biosimilarity.reflection.model.rlambda;


/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri May 15 12:19:41 PDT 2009
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\015\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\006" +
    "\000\002\003\005\000\002\004\006\000\002\004\003\000" +
    "\002\005\003\000\002\006\002\000\002\006\003\000\002" +
    "\006\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\027\000\014\005\007\007\006\013\004\014\014\015" +
    "\012\001\002\000\010\004\ufff7\007\006\015\012\001\002" +
    "\000\022\002\ufffe\005\ufffe\006\ufffe\007\ufffe\011\ufffe\013" +
    "\ufffe\014\ufffe\015\ufffe\001\002\000\004\010\021\001\002" +
    "\000\014\005\007\007\006\013\004\014\014\015\012\001" +
    "\002\000\016\002\015\005\007\007\006\013\004\014\014" +
    "\015\012\001\002\000\020\002\uffff\005\uffff\006\uffff\007" +
    "\uffff\013\uffff\014\uffff\015\uffff\001\002\000\026\002\ufff9" +
    "\004\ufff9\005\ufff9\006\ufff9\007\ufff9\011\ufff9\012\ufff9\013" +
    "\ufff9\014\ufff9\015\ufff9\001\002\000\022\002\ufffd\005\ufffd" +
    "\006\ufffd\007\ufffd\011\ufffd\013\ufffd\014\ufffd\015\ufffd\001" +
    "\002\000\022\002\ufff8\005\ufff8\006\ufff8\007\ufff8\011\ufff8" +
    "\013\ufff8\014\ufff8\015\ufff8\001\002\000\004\002\001\001" +
    "\002\000\020\002\000\005\000\006\000\007\000\013\000" +
    "\014\000\015\000\001\002\000\016\005\007\006\020\007" +
    "\006\013\004\014\014\015\012\001\002\000\022\002\ufffb" +
    "\005\ufffb\006\ufffb\007\ufffb\011\ufffb\013\ufffb\014\ufffb\015" +
    "\ufffb\001\002\000\014\005\007\007\006\013\004\014\014" +
    "\015\012\001\002\000\004\011\023\001\002\000\026\002" +
    "\ufffa\004\ufffa\005\ufffa\006\ufffa\007\ufffa\011\ufffa\012\ufffa" +
    "\013\ufffa\014\ufffa\015\ufffa\001\002\000\006\004\ufff6\012" +
    "\030\001\002\000\004\004\026\001\002\000\014\005\007" +
    "\007\006\013\004\014\014\015\012\001\002\000\022\002" +
    "\ufffc\005\ufffc\006\ufffc\007\ufffc\011\ufffc\013\ufffc\014\ufffc" +
    "\015\ufffc\001\002\000\010\004\ufff7\007\006\015\012\001" +
    "\002\000\004\004\ufff5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\027\000\012\002\007\003\010\004\004\005\012\001" +
    "\001\000\006\004\023\006\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\002\016\003\010\004\004\005" +
    "\012\001\001\000\010\003\015\004\004\005\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\003\015\004\004\005\012\001\001\000\002\001\001\000" +
    "\010\003\021\004\004\005\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\003\026\004\004\005\012\001\001\000\002\001\001" +
    "\000\006\004\023\006\030\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public com.biosimilarity.reflection.model.rlambda.Absyn.Expression pExpression() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (com.biosimilarity.reflection.model.rlambda.Absyn.Expression) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ListVariableExpr ::= VariableExpr _SYMB_6 ListVariableExpr 
            {
              com.biosimilarity.reflection.model.rlambda.Absyn.ListVariableExpr RESULT =null;
		com.biosimilarity.reflection.model.rlambda.Absyn.VariableExpr p_1 = (com.biosimilarity.reflection.model.rlambda.Absyn.VariableExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.reflection.model.rlambda.Absyn.ListVariableExpr p_3 = (com.biosimilarity.reflection.model.rlambda.Absyn.ListVariableExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListVariableExpr",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ListVariableExpr ::= VariableExpr 
            {
              com.biosimilarity.reflection.model.rlambda.Absyn.ListVariableExpr RESULT =null;
		com.biosimilarity.reflection.model.rlambda.Absyn.VariableExpr p_1 = (com.biosimilarity.reflection.model.rlambda.Absyn.VariableExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.reflection.model.rlambda.Absyn.ListVariableExpr(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListVariableExpr",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ListVariableExpr ::= 
            {
              com.biosimilarity.reflection.model.rlambda.Absyn.ListVariableExpr RESULT =null;
		 RESULT = new com.biosimilarity.reflection.model.rlambda.Absyn.ListVariableExpr(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListVariableExpr",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ValueExpr ::= _INTEGER_ 
            {
              com.biosimilarity.reflection.model.rlambda.Absyn.ValueExpr RESULT =null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.reflection.model.rlambda.Absyn.Numeric(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValueExpr",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VariableExpr ::= _IDENT_ 
            {
              com.biosimilarity.reflection.model.rlambda.Absyn.VariableExpr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.reflection.model.rlambda.Absyn.AtomLiteral(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VariableExpr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VariableExpr ::= _SYMB_3 _SYMB_4 Expression1 _SYMB_5 
            {
              com.biosimilarity.reflection.model.rlambda.Absyn.VariableExpr RESULT =null;
		com.biosimilarity.reflection.model.rlambda.Absyn.Expression p_3 = (com.biosimilarity.reflection.model.rlambda.Absyn.Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.biosimilarity.reflection.model.rlambda.Absyn.Transcription(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VariableExpr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Expression1 ::= _SYMB_1 Expression _SYMB_2 
            {
              com.biosimilarity.reflection.model.rlambda.Absyn.Expression RESULT =null;
		com.biosimilarity.reflection.model.rlambda.Absyn.Expression p_2 = (com.biosimilarity.reflection.model.rlambda.Absyn.Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression1",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Expression1 ::= _SYMB_7 ListVariableExpr _SYMB_0 Expression1 
            {
              com.biosimilarity.reflection.model.rlambda.Absyn.Expression RESULT =null;
		com.biosimilarity.reflection.model.rlambda.Absyn.ListVariableExpr p_2 = (com.biosimilarity.reflection.model.rlambda.Absyn.ListVariableExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.reflection.model.rlambda.Absyn.Expression p_4 = (com.biosimilarity.reflection.model.rlambda.Absyn.Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.reflection.model.rlambda.Absyn.Abstraction(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression1",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Expression1 ::= ValueExpr 
            {
              com.biosimilarity.reflection.model.rlambda.Absyn.Expression RESULT =null;
		com.biosimilarity.reflection.model.rlambda.Absyn.ValueExpr p_1 = (com.biosimilarity.reflection.model.rlambda.Absyn.ValueExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.reflection.model.rlambda.Absyn.Value(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression1",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Expression1 ::= VariableExpr 
            {
              com.biosimilarity.reflection.model.rlambda.Absyn.Expression RESULT =null;
		com.biosimilarity.reflection.model.rlambda.Absyn.VariableExpr p_1 = (com.biosimilarity.reflection.model.rlambda.Absyn.VariableExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.reflection.model.rlambda.Absyn.Mention(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression1",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Expression ::= Expression1 
            {
              com.biosimilarity.reflection.model.rlambda.Absyn.Expression RESULT =null;
		com.biosimilarity.reflection.model.rlambda.Absyn.Expression p_1 = (com.biosimilarity.reflection.model.rlambda.Absyn.Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Expression ::= Expression Expression1 
            {
              com.biosimilarity.reflection.model.rlambda.Absyn.Expression RESULT =null;
		com.biosimilarity.reflection.model.rlambda.Absyn.Expression p_1 = (com.biosimilarity.reflection.model.rlambda.Absyn.Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		com.biosimilarity.reflection.model.rlambda.Absyn.Expression p_2 = (com.biosimilarity.reflection.model.rlambda.Absyn.Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.reflection.model.rlambda.Absyn.Application(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Expression EOF 
            {
              Object RESULT =null;
		com.biosimilarity.reflection.model.rlambda.Absyn.Expression start_val = (com.biosimilarity.reflection.model.rlambda.Absyn.Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

