-- -*- mode: Haskell;-*- 
-- Filename:    event.cf 
-- Authors:     lgm                                                    
-- Creation:    Thu May 28 11:24:12 2009 
-- Copyright:   Not supplied 
-- Description: 
-- ------------------------------------------------------------------------

-- class PerformanceEvent {
--     /**
--      * This is an identifier for the session. In the "live" case this would be
--      * derived from the Rails session ID cookie. In the load test case this will
--      * most likely be a UUID generated by the test server.
--      */
--     String sessionId;
--     /**
--      * This is the correlation ID used to group messages related to a single operation. By
--      * 'operation' we mean a collection of things performed as a result of sending a single
--      * initiating message from the CometServer or the test server.
--      */
--     String correlationId;
--     /**
--      * This string identifies the 'kind' of server that generated the event
--      * (For example, 'CometServer', 'PBE Agent', 'TestServer')
--      */
--     String serverKind;
--     /**
--      * This string identifies the phase of the operation that caused the event
--      * Examples: 'started', 'completed', 'timeout', 'receivedAtAgent', 'acknowledgedByAgent' etc)
--      */
--     String phase;
--     /**
--      * This number identifies the distance from origin
--      */
--     Integer hop;
--     /**
--      * This string identifies the machine at which the event occurred, for timestamp comparison purposes
--      */
--     String nodeId;
--     /**
--      * This is the UTC time for the event (as recorded at the machine where the event occurred.)
--      */
--     java.util.Date timestamp;
-- }

-- Entry point
MonitorEventExpr  . Expression            ::= MonitoringEvent;
OptMonitorEventExpr . Expression          ::= OptMonitoringEvent;

-- Grammar
PerformanceEvent  . MonitoringEvent       ::= "event" "{" SessionIdProp CorrelationIdProp ServerKindProp PhaseProp HopProp NodeIdProp TimestampProp "}";
BindEvent         . MonitoringEvent       ::= "bind" "{" HumanReadableIdProp MachineReadableIdProp "}"     ;
OptPerfEvent      . OptMonitoringEvent    ::= "!" "{" String String String String Integer String String "}" ;
OptBindEvent      . OptMonitoringEvent    ::= ":=" "{" String String "}"                  ;


SessionId         . SessionIdProp         ::= String                         ;
CorrelationId     . CorrelationIdProp     ::= String                         ;
ServerKind        . ServerKindProp        ::= String                         ;
Phase             . PhaseProp             ::= String                         ;
Hop               . HopProp               ::= Integer                        ;
NodeId            . NodeIdProp            ::= String                         ;
Timestamp         . TimestampProp         ::= Integer                        ;

HumanReadableId   . HumanReadableIdProp   ::= String                         ;
MachineReadableId . MachineReadableIdProp ::= String                         ;

-- The grammar below provides one encoding of the structure above. It
-- will result in Java class structure:
--
-- abstract class MonitoringEvent
-- class PerformanceEvent extends MonitoringEvent {
--    SessionId     sessionId_
--    CorrelationId correlationId_
--    ServerKind    serverKind_
--    Phase         phase_
--    Hop           hop_
--    NodeId        nodeId_
-- }
-- class BindEvent extends MonitoringEvent {
--    HumanReadableId   humanReadableId_
--    MachineReadableId machineReadable_
-- }
-- abstract class PerfEventProp 
-- class SessionId extends PerfEventProp { String string_ } 
-- class CorrelationId extends PerfEventProp { String string_ } 
-- class ServerKind extends PerfEventProp { String string_ } 
-- class Phase extends PerfEventProp { String string_ } 
-- class Hop extends PerfEventProp { Integer integer_ } 
-- class NodeId extends PerfEventProp { String string_ } 
-- abstract class BindEventProp
-- class HumanReadableId extends BindEventProp { String string_ }
-- class MachineReadableId extends BindEventProp { String string_ }

-- This is a little bit bloated, but it has some nice characteristics
-- when we go to extend the framework. It also provides machinery for
-- some correctness checking. 